{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-Staking\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-Staking\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-Staking\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-Staking\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-Staking\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-Staking\\\\defi-staking\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-Staking\\\\defi-staking\\\\src\\\\components\\\\Airdrop.js\";\nimport React, { Component } from 'react';\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  // airdrop to have a timer that counts down\n  // initialize the countdown after the investor stake min 50 tokens (mUSD)\n  // timer functionality, countdown, startTimer, start for the timer to work\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 20\n    };\n    _this.timer = 0; // enable startTime function to be called in the rendering part\n\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Airdrop, [{\n    key: \"countDown\",\n    value: function countDown() {\n      // this function will called every second till the seconds = 0\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // clear the timer when seconds hit zero\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0 && this.props.rwdBal == 0) {\n        // the second argument is the rate of the timer, which is 1 second\n        // at every 1 sec this function will call the countDown function\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds;\n      hours = Math.floor(secs / 3600);\n      minutes = Math.floor(secs % 3600 / 60);\n      seconds = secs % 3600 % 60;\n      var obj = {\n        'h': hours,\n        'm': minutes,\n        's': seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeftVar = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeftVar\n      });\n    }\n  }, {\n    key: \"airdropReleaseTokens\",\n    value: function airdropReleaseTokens() {\n      // convert from wei to ether\n      var stakingBal = window.web3.utils.fromWei(this.props.stakingBal, 'Ether'); // define staking balance threshold in ether - 20 USDT\n\n      var stakingBalThreshold = window.web3.utils.fromWei('20000000000000000000', 'Ether');\n\n      if (stakingBal >= stakingBalThreshold) {\n        this.startTimer(); // this.setState({finalStakeBal: stakingBal});\n        // finalStakeBal = window.web3.utils.fromWei(this.state.finalStakeBal, 'Ether');\n      }\n\n      if (this.state.seconds == 0) {\n        // window.alert('the timer hits zero....');\n        this.props.issueRwdTokens();\n        this.timer = 0; // window.location.reload();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.airdropReleaseTokens();\n      console.log(this.state.initialStakeBal);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, this.state.time.h, \"h : \", this.state.time.m, \"m : \", this.state.time.s, \"s\");\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["C:/Users/admin/OneDrive/Documents/DeFi-Staking/defi-staking/src/components/Airdrop.js"],"names":["React","Component","Airdrop","state","time","seconds","timer","startTimer","bind","countDown","setState","secondsToTime","clearInterval","props","rwdBal","setInterval","secs","hours","minutes","Math","floor","obj","timeLeftVar","stakingBal","window","web3","utils","fromWei","stakingBalThreshold","issueRwdTokens","airdropReleaseTokens","console","log","initialStakeBal","color","h","m","s"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAGMC,O;;;AAEF;AACA;AACA;AAEA,qBAAc;AAAA;;AAAA;;AACV;AACA,UAAKC,KAAL,GAAY;AACRC,MAAAA,IAAI,EAAC,EADG;AAERC,MAAAA,OAAO,EAAE;AAFD,KAAZ;AAIA,UAAKC,KAAL,GAAa,CAAb,CANU,CAOV;;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AATU;AAUb;;;;gCAEW;AACR;AACA,UAAIH,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AACA,WAAKK,QAAL,CAAc;AACVN,QAAAA,IAAI,EAAE,KAAKO,aAAL,CAAmBN,OAAnB,CADI;AAEVA,QAAAA,OAAO,EAAEA;AAFC,OAAd,EAHQ,CAOR;;AACA,UAAGA,OAAO,IAAI,CAAd,EAAiB;AACbO,QAAAA,aAAa,CAAC,KAAKN,KAAN,CAAb;AACH;AACJ;;;iCAEY;AACT,UAAI,KAAKA,KAAL,IAAc,CAAd,IAAmB,KAAKH,KAAL,CAAWE,OAAX,GAAoB,CAAvC,IAA4C,KAAKQ,KAAL,CAAWC,MAAX,IAAqB,CAArE,EAAwE;AACpE;AACA;AACA,aAAKR,KAAL,GAAaS,WAAW,CAAC,KAAKN,SAAN,EAAiB,IAAjB,CAAxB;AACH;AACJ;;;kCAEaO,I,EAAM;AAChB,UAAIC,KAAJ,EAAWC,OAAX,EAAoBb,OAApB;AACAY,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAC,IAAhB,CAAR;AACAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYJ,IAAI,GAAG,IAAR,GAAc,EAAzB,CAAV;AACAX,MAAAA,OAAO,GAAIW,IAAI,GAAG,IAAR,GAAgB,EAA1B;AACA,UAAIK,GAAG,GAAG;AACN,aAAKJ,KADC;AAEN,aAAKC,OAFC;AAGN,aAAKb;AAHC,OAAV;AAKA,aAAOgB,GAAP;AACH;;;wCAEmB;AAChB,UAAIC,WAAW,GAAG,KAAKX,aAAL,CAAmB,KAAKR,KAAL,CAAWE,OAA9B,CAAlB;AACA,WAAKK,QAAL,CAAc;AAACN,QAAAA,IAAI,EAACkB;AAAN,OAAd;AACH;;;2CAEsB;AACnB;AACA,UAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkBC,OAAlB,CAA0B,KAAKd,KAAL,CAAWU,UAArC,EAAiD,OAAjD,CAAjB,CAFmB,CAGnB;;AACA,UAAMK,mBAAmB,GAAGJ,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkBC,OAAlB,CAA0B,sBAA1B,EAAkD,OAAlD,CAA5B;;AACA,UAAIJ,UAAU,IAAIK,mBAAlB,EAAuC;AACnC,aAAKrB,UAAL,GADmC,CAEnC;AACA;AACH;;AACD,UAAI,KAAKJ,KAAL,CAAWE,OAAX,IAAsB,CAA1B,EAA6B;AACzB;AACA,aAAKQ,KAAL,CAAWgB,cAAX;AACA,aAAKvB,KAAL,GAAa,CAAb,CAHyB,CAIzB;AACH;AACJ;;;6BAEQ;AACL,WAAKwB,oBAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAW8B,eAAvB;AACA,0BACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK/B,KAAL,CAAWC,IAAX,CAAgB+B,CADrB,UAC4B,KAAKhC,KAAL,CAAWC,IAAX,CAAgBgC,CAD5C,UACmD,KAAKjC,KAAL,CAAWC,IAAX,CAAgBiC,CADnE,MADJ;AAMH;;;;EApFiBpC,S;;AAuFtB,eAAeC,OAAf","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Airdrop extends Component {\n\n    // airdrop to have a timer that counts down\n    // initialize the countdown after the investor stake min 50 tokens (mUSD)\n    // timer functionality, countdown, startTimer, start for the timer to work\n\n    constructor() {\n        super();\n        this.state ={\n            time:{},\n            seconds: 20\n        }\n        this.timer = 0;\n        // enable startTime function to be called in the rendering part\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }\n\n    countDown() {\n        // this function will called every second till the seconds = 0\n        let seconds = this.state.seconds - 1;\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds\n        });\n        // clear the timer when seconds hit zero\n        if(seconds == 0) {\n            clearInterval(this.timer);\n        }\n    }\n\n    startTimer() {\n        if (this.timer == 0 && this.state.seconds >0 && this.props.rwdBal == 0) {\n            // the second argument is the rate of the timer, which is 1 second\n            // at every 1 sec this function will call the countDown function\n            this.timer = setInterval(this.countDown, 1000);\n        }\n    }\n\n    secondsToTime(secs) {\n        let hours, minutes, seconds;\n        hours = Math.floor(secs/3600);\n        minutes = Math.floor((secs % 3600)/60);\n        seconds = (secs % 3600) % 60;\n        let obj = {\n            'h': hours,\n            'm': minutes,\n            's': seconds\n        }\n        return obj\n    }\n\n    componentDidMount() {\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState({time:timeLeftVar});\n    }\n\n    airdropReleaseTokens() {\n        // convert from wei to ether\n        let stakingBal = window.web3.utils.fromWei(this.props.stakingBal, 'Ether');\n        // define staking balance threshold in ether - 20 USDT\n        const stakingBalThreshold = window.web3.utils.fromWei('20000000000000000000', 'Ether');\n        if (stakingBal >= stakingBalThreshold) {\n            this.startTimer();\n            // this.setState({finalStakeBal: stakingBal});\n            // finalStakeBal = window.web3.utils.fromWei(this.state.finalStakeBal, 'Ether');\n        }\n        if (this.state.seconds == 0) {\n            // window.alert('the timer hits zero....');\n            this.props.issueRwdTokens();\n            this.timer = 0;\n            // window.location.reload();\n        }\n    }\n\n    render() {\n        this.airdropReleaseTokens();\n        console.log(this.state.initialStakeBal);\n        return(\n            <div style={{color: 'black'}}>\n                {this.state.time.h}h : {this.state.time.m}m : {this.state.time.s}s\n                {/* {this.startTimer()} */}\n            </div>\n        );\n    }\n}\n\nexport default Airdrop;"]},"metadata":{},"sourceType":"module"}