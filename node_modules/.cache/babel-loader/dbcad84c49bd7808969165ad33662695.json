{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Documents\\\\DeFi-App-Eth-main\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './Navbar.js';\nimport Navbar from './Navbar.js';\nimport Main from './Main.js';\nimport Web3 from 'web3'; // import contracts *.json from abis\n\nimport Tether from '../abis/Tether.json';\nimport RWD from '../abis/RWD.json';\nimport DecentralBank from '../abis/DecentralBank.json';\nimport ParticleSettings from './ParticleSettings.js';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // call the loadWeb3 function\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // connect the app to the blockchain\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider); //    console.log('window.web3 found - aka wallet')\n                } else {\n                  console.log('No Ethereum Provider Found! Check Metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                console.log('account 0', accounts[0]); // get the network ID in our case Ganache network\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                //console.log(networkId);\n                // Tether contract\n                tetherData = Tether.networks[networkId]; // console.log(tetherData);\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                // load the Tether contract\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address); // update the state\n\n                this.setState({\n                  tether: tether\n                }); // {tether:tether} -> {tether}\n                // run the balanceOf() function in tether contract - since\n                // we are using web3 the syntax is a little different\n\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                // let tetherBalanceC = web3.utils.fromWei(tetherBalance);\n                // console.log({'balanceTether' : tetherBalance});\n                // update the state variable\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('Error: Tether contract not deployed - no detected network');\n\n              case 20:\n                // RWD contract\n                rwdData = RWD.networks[networkId]; // console.log(rwdData);\n\n                if (!rwdData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                // load the EWD contract\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address); // update the state\n\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdBalance = _context3.sent;\n                // console.log({'balanceRWD' : rwdBalance});\n                // update the state variable\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert('Error: RWD contract not deployed - no detected network');\n\n              case 31:\n                // DecentralBank contract\n                decentralBankData = DecentralBank.networks[networkId]; // console.log(rwdData);\n\n                if (!decentralBankData) {\n                  _context3.next = 41;\n                  break;\n                }\n\n                // load the EWD contract\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address); // update the state\n\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 37;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 37:\n                stakingBalance = _context3.sent;\n                // console.log({'stakingBalance' : stakingBalance});\n                // update the state variable\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                _context3.next = 42;\n                break;\n\n              case 41:\n                window.alert('Error: DecentralBank contract not deployed - no detected network');\n\n              case 42:\n                // since loading is completed we turn it on false\n                this.setState({\n                  loading: false\n                });\n\n              case 43:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // Staking function\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.issueRWDTokens = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.issueTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n        id: \"loader\",\n        className: \"text-center\",\n        style: {\n          margin: '30px',\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 40\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 60\n        }\n      }, \"Loading Please Wait...\")) : content = /*#__PURE__*/React.createElement(Main, {\n        tetherBalance: this.state.tetherBalance,\n        rwdBalance: this.state.rwdBalance,\n        stakingBalance: this.state.stakingBalance,\n        stakeTokens: this.stakeTokens,\n        unstakeTokens: this.unstakeTokens,\n        issueRWDTokens: this.issueRWDTokens,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: 'relative'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid text-center\",\n        style: {\n          marginTop: '75px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 37\n        }\n      }, \"Welcome to Neo Bank!\"), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/admin/OneDrive/Documents/DeFi-App-Eth-main/src/components/App.js"],"names":["React","Component","Navbar","Main","Web3","Tether","RWD","DecentralBank","ParticleSettings","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","console","log","eth","getAccounts","accounts","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","alert","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props","stakeTokens","amount","approve","_address","send","from","on","hash","depositTokens","unstakeTokens","issueRWDTokens","issueTokens","content","margin","color","position","marginTop","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Navbar.js';\nimport Navbar from './Navbar.js';\nimport Main from './Main.js';\nimport Web3 from 'web3';\n// import contracts *.json from abis\nimport Tether from '../abis/Tether.json';\nimport RWD from '../abis/RWD.json';\nimport DecentralBank from '../abis/DecentralBank.json';\nimport ParticleSettings from './ParticleSettings.js';\n\n\nclass App extends Component {\n\n    // call the loadWeb3 function\n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n\n    // connect the app to the blockchain\n    async loadWeb3() {\n       if(window.ethereum){\n           window.web3 = new Web3(window.ethereum);\n           await window.ethereum.enable();\n        //    console.log('window.ethereum found - aka wallet')\n       } else if(window.web3) {\n           window.web3 = new Web3(window.web3.currentProvider);\n        //    console.log('window.web3 found - aka wallet')\n       } else {\n           console.log('No Ethereum Provider Found! Check Metamask!')\n       }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3;\n        const accounts = await web3.eth.getAccounts();\n        this.setState({account:accounts[0]})\n        console.log('account 0', accounts[0]);\n        // get the network ID in our case Ganache network\n        const networkId = await web3.eth.net.getId();\n        //console.log(networkId);\n\n        // Tether contract\n        const tetherData = Tether.networks[networkId];\n        // console.log(tetherData);\n        if (tetherData) {\n            // load the Tether contract\n            const tether =  new web3.eth.Contract(Tether.abi,tetherData.address);\n            // update the state\n            this.setState({tether}); // {tether:tether} -> {tether}\n            // run the balanceOf() function in tether contract - since\n            // we are using web3 the syntax is a little different\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call();\n            // let tetherBalanceC = web3.utils.fromWei(tetherBalance);\n            // console.log({'balanceTether' : tetherBalance});\n            // update the state variable\n            this.setState({tetherBalance : tetherBalance.toString()});\n        } else {\n            window.alert('Error: Tether contract not deployed - no detected network');\n        }\n\n        // RWD contract\n        const rwdData = RWD.networks[networkId];\n        // console.log(rwdData);\n        if (rwdData) {\n            // load the EWD contract\n            const rwd =  new web3.eth.Contract(RWD.abi,rwdData.address);\n            // update the state\n            this.setState({rwd});\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\n            // console.log({'balanceRWD' : rwdBalance});\n            // update the state variable\n            this.setState({rwdBalance : rwdBalance.toString()});\n        } else {\n            window.alert('Error: RWD contract not deployed - no detected network');\n        }\n        \n        // DecentralBank contract\n        const decentralBankData = DecentralBank.networks[networkId];\n        // console.log(rwdData);\n        if (decentralBankData) {\n            // load the EWD contract\n            const decentralBank =  new web3.eth.Contract(DecentralBank.abi,decentralBankData.address);\n            // update the state\n            this.setState({decentralBank});\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call();\n            // console.log({'stakingBalance' : stakingBalance});\n            // update the state variable\n            this.setState({stakingBalance : stakingBalance.toString()});\n        } else {\n            window.alert('Error: DecentralBank contract not deployed - no detected network');\n        }\n\n        // since loading is completed we turn it on false\n        this.setState({loading: false});\n    }\n    \n    // Staking function\n    stakeTokens = (amount) => {\n        this.setState({loading: true});\n        this.state.tether.methods\n            .approve(this.state.decentralBank._address, amount)\n            .send({from: this.state.account})\n            .on('transactionHash', (hash) => {\n                this.state.decentralBank.methods.depositTokens(amount)\n                    .send({from:this.state.account})\n                    .on('transactionHash', (hash) => {\n                        this.setState({loading: false});\n                    });\n            });\n    }\n    \n    // unStaking function\n    unstakeTokens = (amount) => {\n    this.setState({loading: true});\n    this.state.decentralBank.methods\n        .unstakeTokens()\n        .send({from:this.state.account})\n        .on('transactionHash', (hash) => {\n            this.setState({loading: false});\n        });\n    }\n    \n    // issue RWD Tokens\n    issueRWDTokens = () => {\n        this.setState({loading: true});\n        this.state.decentralBank.methods\n            .issueTokens()\n            .send({from:this.state.account})\n            .on('transactionHash', (hash) => {\n                this.setState({loading: false});\n            });\n        }\n    \n\n   \n    constructor(props) {\n        super(props);\n        this.state = {\n            account : '0x0',\n            tether: {},\n            rwd: {},\n            decentralBank: {},\n            tetherBalance: '0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            loading: true\n        }\n    }\n\n    render() {\n        let content;\n        this.state.loading ? content = <p id='loader' className='text-center' \n                    style={{margin:'30px', color:'white'}}><b>Loading Please Wait...</b></p> : \n                    content = \n                    <Main\n                        tetherBalance = {this.state.tetherBalance}\n                        rwdBalance = {this.state.rwdBalance}\n                        stakingBalance = {this.state.stakingBalance}\n                        stakeTokens = {this.stakeTokens}\n                        unstakeTokens = {this.unstakeTokens}\n                        issueRWDTokens = {this.issueRWDTokens}\n                    />\n        return(\n            <div className='App' style={{position:'relative'}}>\n                <div style={{position:'absolute'}}>\n                    <ParticleSettings/>\n                </div>\n                <Navbar account={this.state.account}/>\n                <div className='container-fluid text-center' style={{marginTop: '75px'}} >\n                   <div className='row content'>\n                        <main role='main' className='col-lg-12 ml-auto mr-auto'\n                            style={{maxWidth:'600px', minHeight: '100vm'}}>\n                                {/* <p>test</p> */}\n                                <div className='pt-3'>\n                                    <h2 style={{color: 'white'}}>Welcome to Neo Bank!</h2>\n                                    {/* <Main/> */}\n                                    { content }\n                                </div>\n                        </main> \n                   </div>\n                   \n                </div>     \n            </div>\n        );\n    }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}